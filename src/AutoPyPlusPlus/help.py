import tkinter as tk
from tkinter import scrolledtext, ttk

# Dictionary to store help texts in multiple languages
HELP_TEXTS = {
    "edit_helper": {
        "de": (
            "=== Hilfe ‚Äì Funktionsbeschreibung mit Beispielen ===\n\n"
            "üöÄ **Allgemeine Optionen**\n"
            "‚Ä¢ **Onefile**\n"
            "  Alles in einer einzigen ausf√ºhrbaren EXE-Datei b√ºndeln (praktisch f√ºr einfache Verteilung).\n"
            "‚Ä¢ **Konsole**\n"
            "  L√§sst beim Ausf√ºhren das Konsolenfenster sichtbar (gut f√ºr Debug-Ausgaben).\n"
            "‚Ä¢ **Fenster-Modus**\n"
            "  Anwendung ohne sichtbares Konsolenfenster starten (z.B. f√ºr grafische Benutzeroberfl√§chen).\n"
            "‚Ä¢ **Use PyArmor**\n"
            "  Aktiviert Code-Verschleierung f√ºr zus√§tzlichen Schutz (optional).\n\n"
            "üì¶ **Felder:**\n"
            "‚Ä¢ **Name**\n"
            "  Name des Projekts oder der ausf√ºhrbaren Datei.\n"
            "  Eingabebeispiel:\n"
            "  MeinBackupTool\n\n"
            "‚Ä¢ **Script**\n"
            "  Pfad zum Python-Skript, das kompiliert werden soll.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/backupWizard.py\n\n"
            "‚Ä¢ **Ausgabeordner**\n"
            "  Zielordner f√ºr die erstellte EXE-Datei.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/dist\n\n"
            "‚Ä¢ **Iconpfad**\n"
            "  Pfad zu einer .ico-Datei als Programmsymbol.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/assets/appicon.ico\n\n"
            "‚Ä¢ **Add-Data**\n"
            "  Zus√§tzliche Dateien oder Ordner, die mit der EXE geb√ºndelt werden sollen.\n"
            "  Format: Quellpfad:Zielpfad (bei mehreren Eintr√§gen mit Semikolon trennen).\n"
            "  Eingabebeispiel:\n"
            "  C:/Daten/config.ini:config;C:/Daten/bilder:assets/bilder\n\n"
            "‚Ä¢ **Hidden Imports**\n"
            "  Python-Module, die PyInstaller eventuell nicht automatisch erkennt.\n"
            "  Eingabebeispiel:\n"
            "  requests,lxml,custom_module\n\n"
            "‚Ä¢ **Version-Datei**\n"
            "  Pfad zu einer Datei mit Versionsinformationen.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/version.txt\n\n"
            "‚Ä¢ **Runtime Hook**\n"
            "  Pfad zu einem Python-Skript, das beim Start der Anwendung ausgef√ºhrt wird.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Splash-Bild**\n"
            "  Pfad zu einem Bild, das beim Start angezeigt wird.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/splashscreen.png\n\n"
            "‚Ä¢ **Spec-Datei**\n"
            "  Pfad zu einer .spec-Datei f√ºr individuelle PyInstaller-Build-Konfigurationen.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/backupWizard.spec\n\n"
            "‚öôÔ∏è **Erweiterte Optionen:**\n"
            "‚Ä¢ **UPX**: Aktiviert Komprimierung der EXE (verkleinert die Dateigr√∂√üe).\n"
            "‚Ä¢ **Debug**: Aktiviert Debug-Modus (hilfreich f√ºr Fehlersuche).\n"
            "‚Ä¢ **Clean**: Alte Build-Dateien vor dem Erstellen l√∂schen.\n"
            "‚Ä¢ **Strip**: Entfernt Debug-Symbole, verkleinert die EXE.\n"
            "‚Ä¢ **Ohne Runtime Key**: Erstellt die EXE ohne Laufzeit-Schl√ºssel.\n"
            "‚Ä¢ **Tcl deaktivieren**: Deaktiviert Tcl/Tk-Support (z.B. wenn nicht ben√∂tigt).\n\n"
            "üìù **Weitere Optionen:**\n"
            "Hier k√∂nnen zus√§tzliche PyInstaller-Parameter direkt eingetragen werden.\n"
            "Eingabebeispiel:\n"
            "--add-binary=\"C:/libs/extra.dll;extra.dll\" --hidden-import=asyncio\n\n"
            "‚úÖ **Tipps f√ºr erfolgreiche Eingaben:**\n"
            "‚Ä¢ **Add-Data**: Absolute Pfade verwenden und sicherstellen, dass Dateien/Ordner existieren.\n"
            "‚Ä¢ **Hidden Imports**: Module ohne Leerzeichen, nur durch Kommas trennen.\n"
            "  Beispiel:\n"
            "  numpy,requests,flask\n"
            "‚Ä¢ **Icon, Version, Splash**: Dateien m√ºssen existieren und korrekt angegeben werden.\n"
            "‚Ä¢ **Ausgabeordner**: Ordner muss existieren oder automatisch erstellt werden k√∂nnen.\n"
            "‚Ä¢ **Script**: Muss ein g√ºltiges Python-Skript sein.\n\n"
            "üñ±Ô∏è **Schaltfl√§chen:**\n"
            "‚Ä¢ **Speichern**: Speichert die aktuellen Einstellungen des Projekts.\n"
            "‚Ä¢ **Abbrechen**: Schlie√üt das Editor-Fenster ohne Speichern.\n\n\n"
            "üîí **PyArmor-Optionen (Schutz & Verschleierung)**\n"
            "‚Ä¢ **--obf-code <0|1|2>**: Steuert die Obfuskationsebene des Codes (0=keine, 1=normal, 2=hoch).\n"
            "‚Ä¢ **--obf-module <0|1>**: Obfuskiert das gesamte Modul (1=aktiviert).\n"
            "‚Ä¢ **--mix-str**: Verschl√ºsselt Zeichenketten im Code.\n"
            "‚Ä¢ **--no-wrap**: Deaktiviert den Standard-Wrap-Modus.\n"
            "‚Ä¢ **--private**: Aktiviert den privaten Modus (Einschr√§nkung interner Einblicke).\n"
            "‚Ä¢ **--restrict**: Aktiviert restriktiven Modus f√ºr das Paket.\n"
            "‚Ä¢ **--assert-import**: Sicherstellt, dass importierte Module obfuskiert sind.\n"
            "‚Ä¢ **--assert-call**: Sicherstellt, dass aufgerufene Funktionen obfuskiert sind.\n"
            "‚Ä¢ **--platform NAME**: Zielplattform angeben (z.B. windows.x86_64).\n"
            "‚Ä¢ **--use-runtime PATH**: Laufzeitpaket von angegebenem Pfad verwenden.\n"
            "‚Ä¢ **--outer**: Verwendet externen Laufzeitschl√ºssel f√ºr mehr Sicherheit.\n"
            "‚Ä¢ **--expired DATE**: Ablaufdatum setzen (z.B. 2025-12-31).\n"
            "‚Ä¢ **--period N**: √úberpr√ºfungsintervall f√ºr Laufzeitschl√ºssel.\n"
            "‚Ä¢ **--bind-device DEV**: Bindet das Skript an bestimmte Ger√§te (z.B. MAC-Adresse).\n"
            "‚Ä¢ **--pack <onefile|onedir|NAME.spec>**: Verpackt das obfuskierte Projekt.\n"
            "‚Ä¢ **-r, --recursive**: Verschl√ºsselt Dateien in Unterordnern rekursiv.\n"
            "‚Ä¢ **-O PATH**: Ausgabeverzeichnis festlegen.\n"
            "‚Ä¢ **--exclude PATTERN**: Dateien oder Pfade von Obfuskation ausschlie√üen.\n\n"
            "Diese Optionen k√∂nnen in den **PyArmor-Optionen** im Editor direkt angegeben werden.\n\n"
            "üí° **Beispiel-Eingabe:**\n"
            " --platform windows.x86_64 --pack onefile --expired 2025-12-31 --bind-device 08:00:27:12:34:56\n"
            "üñ±Ô∏è **Schaltfl√§chen:**\n"
            "‚Ä¢ **Speichern**: Speichert die aktuellen Einstellungen des Projekts.\n"
            "‚Ä¢ **Abbrechen**: Schlie√üt das Editor-Fenster ohne Speichern.\n"
        ),
        "en": (
            "=== Help ‚Äì Function Description with Examples ===\n\n"
            "üöÄ **General Options**\n"
            "‚Ä¢ **Onefile**\n"
            "  Bundle everything into a single executable EXE file (convenient for easy distribution).\n"
            "‚Ä¢ **Console**\n"
            "  Keep the console window visible during execution (useful for debug outputs).\n"
            "‚Ä¢ **Windowed Mode**\n"
            "  Launch the application without a visible console window (e.g., for graphical user interfaces).\n"
            "‚Ä¢ **Use PyArmor**\n"
            "  Enable code obfuscation for additional protection (optional).\n\n"
            "üì¶ **Fields:**\n"
            "‚Ä¢ **Name**\n"
            "  Name of the project or executable file.\n"
            "  Example input:\n"
            "  MyBackupTool\n\n"
            "‚Ä¢ **Script**\n"
            "  Path to the Python script to be compiled.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/backupWizard.py\n\n"
            "‚Ä¢ **Output Folder**\n"
            "  Destination folder for the created EXE file.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/dist\n\n"
            "‚Ä¢ **Icon Path**\n"
            "  Path to an .ico file for the program icon.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/assets/appicon.ico\n\n"
            "‚Ä¢ **Add-Data**\n"
            "  Additional files or folders to be bundled with the EXE.\n"
            "  Format: SourcePath:TargetPath (separate multiple entries with semicolons).\n"
            "  Example input:\n"
            "  C:/Data/config.ini:config;C:/Data/images:assets/images\n\n"
            "‚Ä¢ **Hidden Imports**\n"
            "  Python modules that PyInstaller might not automatically detect.\n"
            "  Example input:\n"
            "  requests,lxml,custom_module\n\n"
            "‚Ä¢ **Version File**\n"
            "  Path to a file containing version information.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/version.txt\n\n"
            "‚Ä¢ **Runtime Hook**\n"
            "  Path to a Python script executed at application startup.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Splash Image**\n"
            "  Path to an image displayed at startup.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/splashscreen.png\n\n"
            "‚Ä¢ **Spec File**\n"
            "  Path to a .spec file for custom PyInstaller build configurations.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/backupWizard.spec\n\n"
            "‚öôÔ∏è **Advanced Options:**\n"
            "‚Ä¢ **UPX**: Enables compression of the EXE (reduces file size).\n"
            "‚Ä¢ **Debug**: Enables debug mode (helpful for troubleshooting).\n"
            "‚Ä¢ **Clean**: Deletes old build files before creating new ones.\n"
            "‚Ä¢ **Strip**: Removes debug symbols, reducing EXE size.\n"
            "‚Ä¢ **No Runtime Key**: Creates the EXE without a runtime key.\n"
            "‚Ä¢ **Disable Tcl**: Disables Tcl/Tk support (e.g., if not needed).\n\n"
            "üìù **Additional Options:**\n"
            "Enter additional PyInstaller parameters directly here.\n"
            "Example input:\n"
            "--add-binary=\"C:/libs/extra.dll;extra.dll\" --hidden-import=asyncio\n\n"
            "‚úÖ **Tips for Successful Inputs:**\n"
            "‚Ä¢ **Add-Data**: Use absolute paths and ensure files/folders exist.\n"
            "‚Ä¢ **Hidden Imports**: List modules without spaces, separated by commas.\n"
            "  Example:\n"
            "  numpy,requests,flask\n"
            "‚Ä¢ **Icon, Version, Splash**: Files must exist and be correctly specified.\n"
            "‚Ä¢ **Output Folder**: Must exist or be creatable automatically.\n"
            "‚Ä¢ **Script**: Must be a valid Python script.\n\n"
            "üñ±Ô∏è **Buttons:**\n"
            "‚Ä¢ **Save**: Saves the current project settings.\n"
            "‚Ä¢ **Cancel**: Closes the editor window without saving.\n\n\n"
            "üîí **PyArmor Options (Protection & Obfuscation)**\n"
            "‚Ä¢ **--obf-code <0|1|2>**: Controls code obfuscation level (0=none, 1=normal, 2=high).\n"
            "‚Ä¢ **--obf-module <0|1>**: Obfuscates the entire module (1=enabled).\n"
            "‚Ä¢ **--mix-str**: Encrypts strings in the code.\n"
            "‚Ä¢ **--no-wrap**: Disables the default wrap mode.\n"
            "‚Ä¢ **--private**: Enables private mode (restricts internal insights).\n"
            "‚Ä¢ **--restrict**: Enables restrictive mode for the package.\n"
            "‚Ä¢ **--assert-import**: Ensures imported modules are obfuscated.\n"
            "‚Ä¢ **--assert-call**: Ensures called functions are obfuscated.\n"
            "‚Ä¢ **--platform NAME**: Specify target platform (e.g., windows.x86_64).\n"
            "‚Ä¢ **--use-runtime PATH**: Use runtime package from the specified path.\n"
            "‚Ä¢ **--outer**: Uses an external runtime key for added security.\n"
            "‚Ä¢ **--expired DATE**: Set expiration date (e.g., 2025-12-31).\n"
            "‚Ä¢ **--period N**: Verification interval for runtime key.\n"
            "‚Ä¢ **--bind-device DEV**: Binds the script to specific devices (e.g., MAC address).\n"
            "‚Ä¢ **--pack <onefile|onedir|NAME.spec>**: Packs the obfuscated project.\n"
            "‚Ä¢ **-r, --recursive**: Encrypts files in subdirectories recursively.\n"
            "‚Ä¢ **-O PATH**: Specify output directory.\n"
            "‚Ä¢ **--exclude PATTERN**: Exclude files or paths from obfuscation.\n\n"
            "These options can be specified directly in the **PyArmor Options** in the editor.\n\n"
            "üí° **Example Input:**\n"
            " --platform windows.x86_64 --pack onefile --expired 2025-12-31 --bind-device 08:00:27:12:34:56\n"
            "üñ±Ô∏è **Buttons:**\n"
            "‚Ä¢ **Save**: Saves the current project settings.\n"
            "‚Ä¢ **Cancel**: Closes the editor window without saving.\n"
        ),
        "fr": (
            "=== Aide ‚Äì Description des fonctions avec exemples ===\n\n"
            "üöÄ **Options g√©n√©rales**\n"
            "‚Ä¢ **Onefile**\n"
            "  Regroupe tout dans un seul fichier ex√©cutable EXE (pratique pour une distribution simple).\n"
            "‚Ä¢ **Console**\n"
            "  Affiche la fen√™tre de console lors de l'ex√©cution (utile pour les sorties de d√©bogage).\n"
            "‚Ä¢ **Mode Fen√™tr√©**\n"
            "  Lance l'application sans fen√™tre de console visible (par ex. pour les interfaces graphiques).\n"
            "‚Ä¢ **Utiliser PyArmor**\n"
            "  Active l'obfuscation de code pour une protection suppl√©mentaire (optionnel).\n\n"
            "üì¶ **Champs :**\n"
            "‚Ä¢ **Nom**\n"
            "  Nom du projet ou du fichier ex√©cutable.\n"
            "  Exemple de saisie :\n"
            "  MonOutilDeSauvegarde\n\n"
            "‚Ä¢ **Script**\n"
            "  Chemin vers le script Python √† compiler.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/backupWizard.py\n\n"
            "‚Ä¢ **Dossier de sortie**\n"
            "  Dossier cible pour le fichier EXE cr√©√©.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/dist\n\n"
            "‚Ä¢ **Chemin de l'ic√¥ne**\n"
            "  Chemin vers un fichier .ico pour l'ic√¥ne du programme.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/assets/appicon.ico\n\n"
            "‚Ä¢ **Ajout de donn√©es**\n"
            "  Fichiers ou dossiers suppl√©mentaires √† inclure dans l'EXE.\n"
            "  Format : CheminSource:CheminCible (s√©parer les entr√©es multiples par des points-virgules).\n"
            "  Exemple de saisie :\n"
            "  C:/Donnees/config.ini:config;C:/Donnees/images:assets/images\n\n"
            "‚Ä¢ **Imports cach√©s**\n"
            "  Modules Python que PyInstaller pourrait ne pas d√©tecter automatiquement.\n"
            "  Exemple de saisie :\n"
            "  requests,lxml,mon_module_personnalise\n\n"
            "‚Ä¢ **Fichier de version**\n"
            "  Chemin vers un fichier contenant des informations de version.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/version.txt\n\n"
            "‚Ä¢ **Hook d'ex√©cution**\n"
            "  Chemin vers un script Python ex√©cut√© au d√©marrage de l'application.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Image de d√©marrage**\n"
            "  Chemin vers une image affich√©e au d√©marrage.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/splashscreen.png\n\n"
            "‚Ä¢ **Fichier Spec**\n"
            "  Chemin vers un fichier .spec pour des configurations de build PyInstaller personnalis√©es.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/backupWizard.spec\n\n"
            "‚öôÔ∏è **Options avanc√©es :**\n"
            "‚Ä¢ **UPX** : Active la compression de l'EXE (r√©duit la taille du fichier).\n"
            "‚Ä¢ **D√©bogage** : Active le mode d√©bogage (utile pour r√©soudre les erreurs).\n"
            "‚Ä¢ **Nettoyer** : Supprime les anciens fichiers de build avant la cr√©ation.\n"
            "‚Ä¢ **Strip** : Supprime les symboles de d√©bogage, r√©duisant la taille de l'EXE.\n"
            "‚Ä¢ **Sans cl√© d'ex√©cution** : Cr√©e l'EXE sans cl√© d'ex√©cution.\n"
            "‚Ä¢ **D√©sactiver Tcl** : D√©sactive le support Tcl/Tk (par ex. si non n√©cessaire).\n\n"
            "üìù **Options suppl√©mentaires :**\n"
            "Saisissez ici directement des param√®tres PyInstaller suppl√©mentaires.\n"
            "Exemple de saisie :\n"
            "--add-binary=\"C:/libs/extra.dll;extra.dll\" --hidden-import=asyncio\n\n"
            "‚úÖ **Conseils pour des saisies r√©ussies :**\n"
            "‚Ä¢ **Ajout de donn√©es** : Utilisez des chemins absolus et assurez-vous que les fichiers/dossiers existent.\n"
            "‚Ä¢ **Imports cach√©s** : Listez les modules sans espaces, s√©par√©s par des virgules.\n"
            "  Exemple :\n"
            "  numpy,requests,flask\n"
            "‚Ä¢ **Ic√¥ne, Version, Splash** : Les fichiers doivent exister et √™tre correctement sp√©cifi√©s.\n"
            "‚Ä¢ **Dossier de sortie** : Doit exister ou pouvoir √™tre cr√©√© automatiquement.\n"
            "‚Ä¢ **Script** : Doit √™tre un script Python valide.\n\n"
            "üñ±Ô∏è **Boutons :**\n"
            "‚Ä¢ **Enregistrer** : Enregistre les param√®tres actuels du projet.\n"
            "‚Ä¢ **Annuler** : Ferme la fen√™tre de l'√©diteur sans enregistrer.\n\n"
            "üîí **Options PyArmor (Protection & Obfuscation)**\n"
            "‚Ä¢ **--obf-code <0|1|2>** : Contr√¥le le niveau d'obfuscation du code (0=aucun, 1=normal, 2=√©lev√©).\n"
            "‚Ä¢ **--obf-module <0|1>** : Obfusque l'ensemble du module (1=activ√©).\n"
            "‚Ä¢ **--mix-str** : Chiffre les cha√Ænes dans le code.\n"
            "‚Ä¢ **--no-wrap** : D√©sactive le mode d'enveloppement par d√©faut.\n"
            "‚Ä¢ **--private** : Active le mode priv√© (limite les acc√®s internes).\n"
            "‚Ä¢ **--restrict** : Active le mode restrictif pour le paquet.\n"
            "‚Ä¢ **--assert-import** : S'assure que les modules import√©s sont obfusqu√©s.\n"
            "‚Ä¢ **--assert-call** : S'assure que les fonctions appel√©es sont obfusqu√©es.\n"
            "‚Ä¢ **--platform NOM** : Sp√©cifie la plateforme cible (par ex. windows.x86_64).\n"
            "‚Ä¢ **--use-runtime CHEMIN** : Utilise un paquet d'ex√©cution √† partir du chemin sp√©cifi√©.\n"
            "‚Ä¢ **--outer** : Utilise une cl√© d'ex√©cution externe pour plus de s√©curit√©.\n"
            "‚Ä¢ **--expired DATE** : D√©finit une date d'expiration (par ex. 2025-12-31).\n"
            "‚Ä¢ **--period N** : Intervalle de v√©rification pour la cl√© d'ex√©cution.\n"
            "‚Ä¢ **--bind-device DEV** : Lie le script √† des appareils sp√©cifiques (par ex. adresse MAC).\n"
            "‚Ä¢ **--pack <onefile|onedir|NOM.spec>** : Emballe le projet obfusqu√©.\n"
            "‚Ä¢ **-r, --recursive** : Chiffre r√©cursivement les fichiers dans les sous-dossiers.\n"
            "‚Ä¢ **-O CHEMIN** : Sp√©cifie le dossier de sortie.\n"
            "‚Ä¢ **--exclude MOTIF** : Exclut les fichiers ou chemins de l'obfuscation.\n\n"
            "Ces options peuvent √™tre sp√©cifi√©es directement dans les **Options PyArmor** dans l'√©diteur.\n\n"
            "üí° **Exemple de saisie :**\n"
            " --platform windows.x86_64 --pack onefile --expired 2025-12-31 --bind-device 08:00:27:12:34:56\n"
            "üñ±Ô∏è **Boutons :**\n"
            "‚Ä¢ **Enregistrer** : Enregistre les param√®tres actuels du projet.\n"
            "‚Ä¢ **Annuler** : Ferme la fen√™tre de l'√©diteur sans enregistrer.\n"
        ),
        "es": (
            "=== Ayuda ‚Äì Descripci√≥n de funciones con ejemplos ===\n\n"
            "üöÄ **Opciones generales**\n"
            "‚Ä¢ **Onefile**\n"
            "  Empaqueta todo en un solo archivo ejecutable EXE (conveniente para una distribuci√≥n sencilla).\n"
            "‚Ä¢ **Consola**\n"
            "  Mantiene visible la ventana de consola durante la ejecuci√≥n (√∫til para salidas de depuraci√≥n).\n"
            "‚Ä¢ **Modo Ventana**\n"
            "  Inicia la aplicaci√≥n sin una ventana de consola visible (por ejemplo, para interfaces gr√°ficas).\n"
            "‚Ä¢ **Usar PyArmor**\n"
            "  Activa la ofuscaci√≥n de c√≥digo para protecci√≥n adicional (opcional).\n\n"
            "üì¶ **Campos:**\n"
            "‚Ä¢ **Nombre**\n"
            "  Nombre del proyecto o del archivo ejecutable.\n"
            "  Ejemplo de entrada:\n"
            "  MiHerramientaDeCopia\n\n"
            "‚Ä¢ **Script**\n"
            "  Ruta al script de Python que se va a compilar.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/backupWizard.py\n\n"
            "‚Ä¢ **Carpeta de salida**\n"
            "  Carpeta de destino para el archivo EXE creado.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/dist\n\n"
            "‚Ä¢ **Ruta del icono**\n"
            "  Ruta a un archivo .ico para el √≠cono del programa.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/assets/appicon.ico\n\n"
            "‚Ä¢ **A√±adir datos**\n"
            "  Archivos o carpetas adicionales para incluir en el EXE.\n"
            "  Formato: RutaOrigen:RutaDestino (separar m√∫ltiples entradas con punto y coma).\n"
            "  Ejemplo de entrada:\n"
            "  C:/Datos/config.ini:config;C:/Datos/imagenes:assets/imagenes\n\n"
            "‚Ä¢ **Imports ocultos**\n"
            "  M√≥dulos de Python que PyInstaller podr√≠a no detectar autom√°ticamente.\n"
            "  Ejemplo de entrada:\n"
            "  requests,lxml,modulo_personalizado\n\n"
            "‚Ä¢ **Archivo de versi√≥n**\n"
            "  Ruta a un archivo con informaci√≥n de versi√≥n.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/version.txt\n\n"
            "‚Ä¢ **Hook de ejecuci√≥n**\n"
            "  Ruta a un script de Python ejecutado al iniciar la aplicaci√≥n.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Imagen de inicio**\n"
            "  Ruta a una imagen que se muestra al iniciar.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/splashscreen.png\n\n"
            "‚Ä¢ **Archivo Spec**\n"
            "  Ruta a un archivo .spec para configuraciones de compilaci√≥n personalizadas de PyInstaller.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/backupWizard.spec\n\n"
            "‚öôÔ∏è **Opciones avanzadas:**\n"
            "‚Ä¢ **UPX**: Activa la compresi√≥n del EXE (reduce el tama√±o del archivo).\n"
            "‚Ä¢ **Depuraci√≥n**: Activa el modo de depuraci√≥n (√∫til para solucionar errores).\n"
            "‚Ä¢ **Limpiar**: Elimina archivos de compilaci√≥n antiguos antes de crear nuevos.\n"
            "‚Ä¢ **Strip**: Elimina s√≠mbolos de depuraci√≥n, reduciendo el tama√±o del EXE.\n"
            "‚Ä¢ **Sin clave de ejecuci√≥n**: Crea el EXE sin clave de ejecuci√≥n.\n"
            "‚Ä¢ **Desactivar Tcl**: Desactiva el soporte de Tcl/Tk (por ejemplo, si no es necesario).\n\n"
            "üìù **Opciones adicionales:**\n"
            "Ingresa par√°metros adicionales de PyInstaller directamente aqu√≠.\n"
            "Ejemplo de entrada:\n"
            "--add-binary=\"C:/libs/extra.dll;extra.dll\" --hidden-import=asyncio\n\n"
            "‚úÖ **Consejos para entradas exitosas:**\n"
            "‚Ä¢ **A√±adir datos**: Usa rutas absolutas y aseg√∫rate de que los archivos/carpetas existan.\n"
            "‚Ä¢ **Imports ocultos**: Lista los m√≥dulos sin espacios, separados por comas.\n"
            "  Ejemplo:\n"
            "  numpy,requests,flask\n"
            "‚Ä¢ **Icono, Versi√≥n, Splash**: Los archivos deben existir y estar correctamente especificados.\n"
            "‚Ä¢ **Carpeta de salida**: Debe existir o poder crearse autom√°ticamente.\n"
            "‚Ä¢ **Script**: Debe ser un script de Python v√°lido.\n\n"
            "üñ±Ô∏è **Botones:**\n"
            "‚Ä¢ **Guardar**: Guarda la configuraci√≥n actual del proyecto.\n"
            "‚Ä¢ **Cancelar**: Cierra la ventana del editor sin guardar.\n\n"
            "üîí **Opciones de PyArmor (Protecci√≥n y Ofuscaci√≥n)**\n"
            "‚Ä¢ **--obf-code <0|1|2>**: Controla el nivel de ofuscaci√≥n del c√≥digo (0=ninguno, 1=normal, 2=alto).\n"
            "‚Ä¢ **--obf-module <0|1>**: Ofusca todo el m√≥dulo (1=activado).\n"
            "‚Ä¢ **--mix-str**: Cifra las cadenas en el c√≥digo.\n"
            "‚Ä¢ **--no-wrap**: Desactiva el modo de envoltura predeterminado.\n"
            "‚Ä¢ **--private**: Activa el modo privado (restringe accesos internos).\n"
            "‚Ä¢ **--restrict**: Activa el modo restrictivo para el paquete.\n"
            "‚Ä¢ **--assert-import**: Asegura que los m√≥dulos importados est√©n ofuscados.\n"
            "‚Ä¢ **--assert-call**: Asegura que las funciones llamadas est√©n ofuscadas.\n"
            "‚Ä¢ **--platform NOMBRE**: Especifica la plataforma objetivo (por ejemplo, windows.x86_64).\n"
            "‚Ä¢ **--use-runtime RUTA**: Usa el paquete de tiempo de ejecuci√≥n desde la ruta especificada.\n"
            "‚Ä¢ **--outer**: Usa una clave de tiempo de ejecuci√≥n externa para mayor seguridad.\n"
            "‚Ä¢ **--expired FECHA**: Establece una fecha de caducidad (por ejemplo, 2025-12-31).\n"
            "‚Ä¢ **--period N**: Intervalo de verificaci√≥n para la clave de tiempo de ejecuci√≥n.\n"
            "‚Ä¢ **--bind-device DEV**: Vincula el script a dispositivos espec√≠ficos (por ejemplo, direcci√≥n MAC).\n"
            "‚Ä¢ **--pack <onefile|onedir|NOMBRE.spec>**: Empaqueta el proyecto ofuscado.\n"
            "‚Ä¢ **-r, --recursive**: Cifra archivos en subdirectorios de forma recursiva.\n"
            "‚Ä¢ **-O RUTA**: Especifica el directorio de salida.\n"
            "‚Ä¢ **--exclude PATR√ìN**: Excluye archivos o rutas de la ofuscaci√≥n.\n\n"
            "Estas opciones se pueden especificar directamente en las **Opciones de PyArmor** en el editor.\n\n"
            "üí° **Ejemplo de entrada:**\n"
            " --platform windows.x86_64 --pack onefile --expired 2025-12-31 --bind-device 08:00:27:12:34:56\n"
            "üñ±Ô∏è **Botones:**\n"
            "‚Ä¢ **Guardar**: Guarda la configuraci√≥n actual del proyecto.\n"
            "‚Ä¢ **Cancelar**: Cierra la ventana del editor sin guardar.\n"
        ),
    },
    "main_helper": {
        "de": (
            "=== Hilfe ‚Äì Hauptfenster ===\n\n"
            "Dieses Fenster dient zur Verwaltung und zum Kompilieren von Projekten.\n"
            "Hier eine √úbersicht aller Funktionen:\n\n"
            "üü© Hotkeys:\n Use Caps Lock for best use \n\n"
            "‚Ä¢ Strg+C: Alle Projekte kompilieren.\n"
            "‚Ä¢ Strg+A: Neues Projekt hinzuf√ºgen.\n"
            "‚Ä¢ Strg+D: Ausgew√§hltes Projekt l√∂schen.\n"
            "‚Ä¢ Strg+Y: Kompiliermodus A/B/C umschalten.\n"
            "‚Ä¢ Strg+L: Projektdatei (.apyscript) laden.\n"
            "‚Ä¢ Strg+S: Projektdatei speichern.\n"
            "‚Ä¢ Strg+Shift+S: Projektdatei speichern unter ...\n"
            "‚Ä¢ Strg+E: Arbeitsverzeichnis leeren.\n"
            "‚Ä¢ Strg+T: Design-Theme wechseln.\n"
            "‚Ä¢ Strg+Q: Programm beenden.\n"
            "‚Ä¢ Strg+F: Vollbild Modus.\n"
            "‚Ä¢ Enter: Projekt bearbeiten.\n\n"
            "üü© Skripte Bereich:\n"
            "‚Ä¢ Hinzuf√ºgen (Shift+A): Ein neues Python- oder Spec-Projekt zur Liste hinzuf√ºgen.\n"
            "‚Ä¢ Bearbeiten (Enter): Das ausgew√§hlte Projekt bearbeiten (z.B. Pfade oder Optionen √§ndern).\n"
            "‚Ä¢ L√∂schen: Entfernt das aktuell ausgew√§hlte Projekt aus der Liste.\n\n"
            "üü© Projekte Bereich:\n"
            "‚Ä¢ Leeren: L√∂scht alle Projekte aus der Liste.\n"
            "‚Ä¢ Laden: L√§dt eine .apyscript-Datei und l√§dt die gespeicherten Projekte.\n"
            "‚Ä¢ Speichern als: Speichert die aktuelle Projektliste als .apyscript oder .spec.\n\n"
            "üü© Projektbereich:\n"
            "‚Ä¢ Inspector: √ñffnet den Debug-Inspector f√ºr die zuletzt erstellte Logdatei.\n"
            "‚Ä¢ Alle kompilieren (Shift+C): Startet die Kompilierung aller ausgew√§hlten Projekte.\n"
            "‚Ä¢ Arbeitsverzeichnis leeren: L√∂scht alle compile_*.log-Dateien und den build-Ordner.\n\n"
            "üü© Header:\n"
            "‚Ä¢ Sprache ausw√§hlen: Wechselt die Sprache der Benutzeroberfl√§che.\n"
            "‚Ä¢ INI laden: L√§dt eine neue INI-Konfigurationsdatei.\n"
            "‚Ä¢ About: Zeigt Informationen √ºber dieses Programm.\n"
            "‚Ä¢ üé® Colors: √Ñndert die Farben f√ºr Modus A/B.\n"
            "‚Ä¢ üñåÔ∏è Design: Wechselt das Design-Theme.\n\n"
            "üü© Treeview:\n"
            "‚Ä¢ Zeigt alle Projekte in der Liste an.\n"
            "‚Ä¢ Checkboxen f√ºr Modus A/B zur Auswahl, welcher Modus verwendet wird.\n"
            "‚Ä¢ Mit Doppelklick oder Enter das Projekt bearbeiten.\n\n"
        ),
        "en": (
            "=== Help ‚Äì Main Window ===\n\n"
            "This window is used for managing and compiling projects.\n"
            "Here is an overview of all functions:\n\n"
            "üü© Hotkeys:\n Use Caps Lock for best use \n\n"
            "‚Ä¢ Ctrl+C: Compile all projects.\n"
            "‚Ä¢ Ctrl+A: Add a new project.\n"
            "‚Ä¢ Ctrl+D: Delete the selected project.\n"
            "‚Ä¢ Ctrl+Y: Switch between compile modes A/B/C.\n"
            "‚Ä¢ Ctrl+L: Load a project file (.apyscript).\n"
            "‚Ä¢ Ctrl+S: Save the project file.\n"
            "‚Ä¢ Ctrl+Shift+S: Save the project file as...\n"
            "‚Ä¢ Ctrl+E: Clear the working directory.\n"
            "‚Ä¢ Ctrl+T: Switch design theme.\n"
            "‚Ä¢ Ctrl+Q: Exit the program.\n"
            "‚Ä¢ Ctrl+F: Fullscreen mode.\n"
            "‚Ä¢ Enter: Edit project.\n\n"
            "üü© Scripts Section:\n"
            "‚Ä¢ Add (Shift+A): Add a new Python or Spec project to the list.\n"
            "‚Ä¢ Edit (Enter): Edit the selected project (e.g., change paths or options).\n"
            "‚Ä¢ Delete: Remove the currently selected project from the list.\n\n"
            "üü© Projects Section:\n"
            "‚Ä¢ Clear: Deletes all projects from the list.\n"
            "‚Ä¢ Load: Loads a .apyscript file and retrieves the saved projects.\n"
            "‚Ä¢ Save As: Saves the current project list as .apyscript or .spec.\n\n"
            "üü© Project Section:\n"
            "‚Ä¢ Inspector: Opens the debug inspector for the latest created log file.\n"
            "‚Ä¢ Compile All (Shift+C): Starts compiling all selected projects.\n"
            "‚Ä¢ Clear Working Directory: Deletes all compile_*.log files and the build folder.\n\n"
            "üü© Header:\n"
            "‚Ä¢ Select Language: Switches the user interface language.\n"
            "‚Ä¢ Load INI: Loads a new INI configuration file.\n"
            "‚Ä¢ About: Displays information about this program.\n"
            "‚Ä¢ üé® Colors: Changes the colors for Mode A/B.\n"
            "‚Ä¢ üñåÔ∏è Design: Switches the design theme.\n\n"
            "üü© Treeview:\n"
            "‚Ä¢ Displays all projects in the list.\n"
            "‚Ä¢ Checkboxes for Mode A/B to select which mode is used.\n"
            "‚Ä¢ Double-click or press Enter to edit the project.\n\n"
        ),
        "fr": (
            "=== Aide ‚Äì Fen√™tre principale ===\n\n"
            "Cette fen√™tre sert √† g√©rer et compiler les projets.\n"
            "Voici un aper√ßu de toutes les fonctions :\n\n"
            "üü© Raccourcis clavier :\n Utilisez la touche Verr Maj pour une meilleure exp√©rience \n\n"
            "‚Ä¢ Ctrl+C : Compiler tous les projets.\n"
            "‚Ä¢ Ctrl+A : Ajouter un nouveau projet.\n"
            "‚Ä¢ Ctrl+D : Supprimer le projet s√©lectionn√©.\n"
            "‚Ä¢ Ctrl+Y : Basculer entre les modes de compilation A/B/C.\n"
            "‚Ä¢ Ctrl+L : Charger un fichier de projet (.apyscript).\n"
            "‚Ä¢ Ctrl+S : Enregistrer le fichier de projet.\n"
            "‚Ä¢ Ctrl+Shift+S : Enregistrer le fichier de projet sous...\n"
            "‚Ä¢ Ctrl+E : Vider le r√©pertoire de travail.\n"
            "‚Ä¢ Ctrl+T : Changer le th√®me de design.\n"
            "‚Ä¢ Ctrl+Q : Quitter le programme.\n"
            "‚Ä¢ Ctrl+F : Mode plein √©cran.\n"
            "‚Ä¢ Entr√©e : Modifier le projet.\n\n"
            "üü© Section Scripts :\n"
            "‚Ä¢ Ajouter (Shift+A) : Ajoute un nouveau projet Python ou Spec √† la liste.\n"
            "‚Ä¢ Modifier (Entr√©e) : Modifie le projet s√©lectionn√© (par ex. changer les chemins ou options).\n"
            "‚Ä¢ Supprimer : Supprime le projet actuellement s√©lectionn√© de la liste.\n\n"
            "üü© Section Projets :\n"
            "‚Ä¢ Vider : Supprime tous les projets de la liste.\n"
            "‚Ä¢ Charger : Charge un fichier .apyscript et r√©cup√®re les projets enregistr√©s.\n"
            "‚Ä¢ Enregistrer sous : Enregistre la liste de projets actuelle sous .apyscript ou .spec.\n\n"
            "üü© Section Projet :\n"
            "‚Ä¢ Inspecteur : Ouvre l'inspecteur de d√©bogage pour le dernier fichier de log cr√©√©.\n"
            "‚Ä¢ Compiler tout (Shift+C) : Lance la compilation de tous les projets s√©lectionn√©s.\n"
            "‚Ä¢ Vider le r√©pertoire de travail : Supprime tous les fichiers compile_*.log et le dossier build.\n\n"
            "üü© En-t√™te :\n"
            "‚Ä¢ S√©lectionner la langue : Change la langue de l'interface utilisateur.\n"
            "‚Ä¢ Charger INI : Charge un nouveau fichier de configuration INI.\n"
            "‚Ä¢ √Ä propos : Affiche des informations sur ce programme.\n"
            "‚Ä¢ üé® Couleurs : Modifie les couleurs pour les modes A/B.\n"
            "‚Ä¢ üñåÔ∏è Design : Change le th√®me de design.\n\n"
            "üü© Treeview :\n"
            "‚Ä¢ Affiche tous les projets dans la liste.\n"
            "‚Ä¢ Cases √† cocher pour les modes A/B pour s√©lectionner le mode utilis√©.\n"
            "‚Ä¢ Double-clic ou touche Entr√©e pour modifier le projet.\n\n"
        ),
        "es": (
            "=== Ayuda ‚Äì Ventana Principal ===\n\n"
            "Esta ventana se utiliza para gestionar y compilar proyectos.\n"
            "Aqu√≠ tienes una descripci√≥n general de todas las funciones:\n\n"
            "üü© Atajos de teclado:\n Usa Bloq May√∫s para un mejor uso \n\n"
            "‚Ä¢ Ctrl+C: Compilar todos los proyectos.\n"
            "‚Ä¢ Ctrl+A: Agregar un nuevo proyecto.\n"
            "‚Ä¢ Ctrl+D: Eliminar el proyecto seleccionado.\n"
            "‚Ä¢ Ctrl+Y: Cambiar entre modos de compilaci√≥n A/B/C.\n"
            "‚Ä¢ Ctrl+L: Cargar un archivo de proyecto (.apyscript).\n"
            "‚Ä¢ Ctrl+S: Guardar el archivo de proyecto.\n"
            "‚Ä¢ Ctrl+Shift+S: Guardar el archivo de proyecto como...\n"
            "‚Ä¢ Ctrl+E: Limpiar el directorio de trabajo.\n"
            "‚Ä¢ Ctrl+T: Cambiar el tema de dise√±o.\n"
            "‚Ä¢ Ctrl+Q: Salir del programa.\n"
            "‚Ä¢ Ctrl+F: Modo de pantalla completa.\n"
            "‚Ä¢ Enter: Editar proyecto.\n\n"
            "üü© Secci√≥n de Scripts:\n"
            "‚Ä¢ Agregar (Shift+A): A√±ade un nuevo proyecto Python o Spec a la lista.\n"
            "‚Ä¢ Editar (Enter): Edita el proyecto seleccionado (por ejemplo, cambiar rutas u opciones).\n"
            "‚Ä¢ Eliminar: Elimina el proyecto actualmente seleccionado de la lista.\n\n"
            "üü© Secci√≥n de Proyectos:\n"
            "‚Ä¢ Limpiar: Elimina todos los proyectos de la lista.\n"
            "‚Ä¢ Cargar: Carga un archivo .apyscript y recupera los proyectos guardados.\n"
            "‚Ä¢ Guardar como: Guarda la lista de proyectos actual como .apyscript o .spec.\n\n"
            "üü© Secci√≥n de Proyecto:\n"
            "‚Ä¢ Inspector: Abre el inspector de depuraci√≥n para el √∫ltimo archivo de registro creado.\n"
            "‚Ä¢ Compilar todo (Shift+C): Inicia la compilaci√≥n de todos los proyectos seleccionados.\n"
            "‚Ä¢ Limpiar directorio de trabajo: Elimina todos los archivos compile_*.log y la carpeta build.\n\n"
            "üü© Encabezado:\n"
            "‚Ä¢ Seleccionar idioma: Cambia el idioma de la interfaz de usuario.\n"
            "‚Ä¢ Cargar INI: Carga un nuevo archivo de configuraci√≥n INI.\n"
            "‚Ä¢ Acerca de: Muestra informaci√≥n sobre este programa.\n"
            "‚Ä¢ üé® Colores: Cambia los colores para los modos A/B.\n"
            "‚Ä¢ üñåÔ∏è Dise√±o: Cambia el tema de dise√±o.\n\n"
            "üü© Treeview:\n"
            "‚Ä¢ Muestra todos los proyectos en la lista.\n"
            "‚Ä¢ Casillas de verificaci√≥n para los modos A/B para seleccionar qu√© modo se usa.\n"
            "‚Ä¢ Doble clic o presionar Enter para editar el proyecto.\n\n"
        ),
        
    },
    "spec_helper": {
        "de": (
            "=== Hilfe ‚Äì Spec-Editor Beschreibung mit Beispielen ===\n\n"
            "üöÄ **Allgemeine Optionen**\n"
            "‚Ä¢ **Onefile**\n"
            "  B√ºndelt die Anwendung in einer einzigen ausf√ºhrbaren EXE-Datei (ideal f√ºr einfache Verteilung).\n"
            "‚Ä¢ **Konsole**\n"
            "  Zeigt ein Konsolenfenster beim Ausf√ºhren der Anwendung an (n√ºtzlich f√ºr Debugging).\n"
            "‚Ä¢ **Windowed**\n"
            "  Startet die Anwendung ohne ein sichtbares Konsolenfenster (z.B. f√ºr GUI-Anwendungen).\n\n"
            "üì¶ **Felder:**\n"
            "‚Ä¢ **Name**\n"
            "  Der Name der ausf√ºhrbaren Datei oder des Projekts.\n"
            "  Eingabebeispiel:\n"
            "  backupWizard\n\n"
            "‚Ä¢ **Icon**\n"
            "  Pfad zu einer .ico-Datei, die als Symbol f√ºr die EXE verwendet wird.\n"
            "  Eingabebeispiel:\n"
            "  C:/xampp/htdocs/cebterOS/engineering/icon_services.ico\n\n"
            "‚Ä¢ **Spec-Datei**\n"
            "  Pfad zu einer .spec-Datei, die PyInstaller-Build-Konfigurationen enth√§lt.\n"
            "  Eingabebeispiel:\n"
            "  C:/xampp/htdocs/cebterOS/engineering/backupWizard.spec\n\n"
            "‚Ä¢ **Runtime Hook**\n"
            "  Pfad zu einem Python-Skript, das beim Start der Anwendung ausgef√ºhrt wird.\n"
            "  Eingabebeispiel:\n"
            "  C:/Projekte/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Hidden Imports**\n"
            "  Python-Module, die PyInstaller m√∂glicherweise nicht automatisch erkennt.\n"
            "  Eingabebeispiel:\n"
            "  requests\nlxml\ncustom_module\n"
            "  (Ein Modul pro Zeile oder durch Kommas getrennt)\n\n"
            "‚Ä¢ **Binaries (add_data)**\n"
            "  Zus√§tzliche Dateien oder Ordner, die in die EXE eingebunden werden sollen.\n"
            "  Format: Quellpfad:Zielpfad (mehrere Eintr√§ge in neuen Zeilen).\n"
            "  Eingabebeispiel:\n"
            "  C:/Daten/config.ini:config\nC:/Daten/bilder:assets/bilder\n\n"
            "‚öôÔ∏è **Erweiterte Optionen:**\n"
            "‚Ä¢ **UPX aktivieren**: Komprimiert die EXE-Datei mit UPX, um die Dateigr√∂√üe zu reduzieren.\n"
            "‚Ä¢ **Debug aktiv**: Aktiviert den Debug-Modus f√ºr detaillierte Ausgaben w√§hrend des Build-Prozesses.\n"
            "‚Ä¢ **Clean aktiv**: L√∂scht alte Build-Dateien vor einem neuen Build.\n"
            "‚Ä¢ **Strip aktiv**: Entfernt Debug-Symbole aus der EXE, um die Dateigr√∂√üe zu verringern.\n\n"
            "‚úÖ **Tipps f√ºr erfolgreiche Eingaben:**\n"
            "‚Ä¢ **Binaries (add_data)**: Verwende absolute Pfade und stelle sicher, dass die Dateien/Ordner existieren.\n"
            "‚Ä¢ **Hidden Imports**: Gib Module ohne Leerzeichen an, entweder in neuen Zeilen oder durch Kommas getrennt.\n"
            "  Beispiel:\n"
            "  numpy\nrequests\nflask\n"
            "‚Ä¢ **Icon und Spec-Datei**: Die Dateien m√ºssen existieren und korrekt angegeben werden.\n"
            "‚Ä¢ √úberpr√ºfe Pfade auf Tippfehler, insbesondere bei Gro√ü-/Kleinschreibung.\n\n"
            "üñ±Ô∏è **Schaltfl√§chen:**\n"
            "‚Ä¢ **Datei hinzuf√ºgen**: F√ºgt eine Daterosenkrantz-Dateien einbinden (z.B. Bilder, DLLs).\n"
            "‚Ä¢ **Speichern**: Speichert die aktuellen Einstellungen des Spec-Editors.\n"
            "‚Ä¢ **Abbrechen**: Schlie√üt das Spec-Editor-Fenster ohne Speichern.\n"
            "‚Ä¢ **Help**: √ñffnet dieses Hilfefenster mit Anleitungen.\n"
        ),
        "en": (
            "=== Help ‚Äì Spec Editor Description with Examples ===\n\n"
            "üöÄ **General Options**\n"
            "‚Ä¢ **Onefile**\n"
            "  Bundle the application into a single executable EXE file (ideal for easy distribution).\n"
            "‚Ä¢ **Console**\n"
            "  Display a console window during application execution (useful for debugging).\n"
            "‚Ä¢ **Windowed**\n"
            "  Launch the application without a visible console window (e.g., for GUI applications).\n\n"
            "üì¶ **Fields:**\n"
            "‚Ä¢ **Name**\n"
            "  The name of the executable file or project.\n"
            "  Example input:\n"
            "  backupWizard\n\n"
            "‚Ä¢ **Icon**\n"
            "  Path to an .ico file used as the icon for the EXE.\n"
            "  Example input:\n"
            "  C:/xampp/htdocs/cebterOS/engineering/icon_services.ico\n\n"
            "‚Ä¢ **Spec File**\n"
            "  Path to a .spec file containing PyInstaller build configurations.\n"
            "  Example input:\n"
            "  C:/xampp/htdocs/cebterOS/engineering/backupWizard.spec\n\n"
            "‚Ä¢ **Runtime Hook**\n"
            "  Path to a Python script executed at application startup.\n"
            "  Example input:\n"
            "  C:/Projects/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Hidden Imports**\n"
            "  Python modules that PyInstaller might not automatically detect.\n"
            "  Example input:\n"
            "  requests\nlxml\ncustom_module\n"
            "  (One module per line or comma-separated)\n\n"
            "‚Ä¢ **Binaries (add_data)**\n"
            "  Additional files or folders to be included in the EXE.\n"
            "  Format: SourcePath:TargetPath (multiple entries on new lines).\n"
            "  Example input:\n"
            "  C:/Data/config.ini:config\nC:/Data/images:assets/images\n\n"
            "‚öôÔ∏è **Advanced Options:**\n"
            "‚Ä¢ **Enable UPX**: Compresses the EXE file with UPX to reduce file size.\n"
            "‚Ä¢ **Enable Debug**: Activates debug mode for detailed outputs during the build process.\n"
            "‚Ä¢ **Enable Clean**: Deletes old build files before a new build.\n"
            "‚Ä¢ **Enable Strip**: Removes debug symbols from the EXE to reduce file size.\n\n"
            "‚úÖ **Tips for Successful Inputs:**\n"
            "‚Ä¢ **Binaries (add_data)**: Use absolute paths and ensure files/folders exist.\n"
            "‚Ä¢ **Hidden Imports**: Specify modules without spaces, either on new lines or comma-separated.\n"
            "  Example:\n"
            "  numpy\nrequests\nflask\n"
            "‚Ä¢ **Icon and Spec File**: Files must exist and be correctly specified.\n"
            "‚Ä¢ Check paths for typos, especially case sensitivity.\n\n"
            "üñ±Ô∏è **Buttons:**\n"
            "‚Ä¢ **Add File**: Adds files to include (e.g., images, DLLs).\n"
            "‚Ä¢ **Save**: Saves the current settings of the Spec Editor.\n"
            "‚Ä¢ **Cancel**: Closes the Spec Editor window without saving.\n"
            "‚Ä¢ **Help**: Opens this help window with instructions.\n"
        ),
        "fr": (
            "=== Aide ‚Äì Description de l'√©diteur Spec avec exemples ===\n\n"
            "üöÄ **Options g√©n√©rales**\n"
            "‚Ä¢ **Onefile**\n"
            "  Regroupe l'application dans un seul fichier ex√©cutable EXE (id√©al pour une distribution simple).\n"
            "‚Ä¢ **Console**\n"
            "  Affiche une fen√™tre de console lors de l'ex√©cution de l'application (utile pour le d√©bogage).\n"
            "‚Ä¢ **Fen√™tr√©**\n"
            "  Lance l'application sans fen√™tre de console visible (par ex. pour les applications GUI).\n\n"
            "üì¶ **Champs :**\n"
            "‚Ä¢ **Nom**\n"
            "  Nom du fichier ex√©cutable ou du projet.\n"
            "  Exemple de saisie :\n"
            "  backupWizard\n\n"
            "‚Ä¢ **Ic√¥ne**\n"
            "  Chemin vers un fichier .ico utilis√© comme ic√¥ne pour l'EXE.\n"
            "  Exemple de saisie :\n"
            "  C:/xampp/htdocs/cebterOS/engineering/icon_services.ico\n\n"
            "‚Ä¢ **Fichier Spec**\n"
            "  Chemin vers un fichier .spec contenant les configurations de build PyInstaller.\n"
            "  Exemple de saisie :\n"
            "  C:/xampp/htdocs/cebterOS/engineering/backupWizard.spec\n\n"
            "‚Ä¢ **Hook d'ex√©cution**\n"
            "  Chemin vers un script Python ex√©cut√© au d√©marrage de l'application.\n"
            "  Exemple de saisie :\n"
            "  C:/Projets/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Imports cach√©s**\n"
            "  Modules Python que PyInstaller pourrait ne pas d√©tecter automatiquement.\n"
            "  Exemple de saisie :\n"
            "  requests\nlxml\nmon_module_personnalise\n"
            "  (Un module par ligne ou s√©par√© par des virgules)\n\n"
            "‚Ä¢ **Binaires (add_data)**\n"
            "  Fichiers ou dossiers suppl√©mentaires √† inclure dans l'EXE.\n"
            "  Format : CheminSource:CheminCible (entr√©es multiples sur de nouvelles lignes).\n"
            "  Exemple de saisie :\n"
            "  C:/Donnees/config.ini:config\nC:/Donnees/images:assets/images\n\n"
            "‚öôÔ∏è **Options avanc√©es :**\n"
            "‚Ä¢ **Activer UPX** : Compresse le fichier EXE avec UPX pour r√©duire la taille du fichier.\n"
            "‚Ä¢ **Activer D√©bogage** : Active le mode d√©bogage pour des sorties d√©taill√©es pendant le processus de build.\n"
            "‚Ä¢ **Activer Nettoyage** : Supprime les anciens fichiers de build avant un nouveau build.\n"
            "‚Ä¢ **Activer Strip** : Supprime les symboles de d√©bogage de l'EXE pour r√©duire la taille du fichier.\n\n"
            "‚úÖ **Conseils pour des saisies r√©ussies :**\n"
            "‚Ä¢ **Binaires (add_data)** : Utilisez des chemins absolus et assurez-vous que les fichiers/dossiers existent.\n"
            "‚Ä¢ **Imports cach√©s** : Sp√©cifiez les modules sans espaces, soit sur de nouvelles lignes, soit s√©par√©s par des virgules.\n"
            "  Exemple :\n"
            "  numpy\nrequests\nflask\n"
            "‚Ä¢ **Ic√¥ne et Fichier Spec** : Les fichiers doivent exister et √™tre correctement sp√©cifi√©s.\n"
            "‚Ä¢ V√©rifiez les chemins pour √©viter les erreurs, notamment la casse.\n\n"
            "üñ±Ô∏è **Boutons :**\n"
            "‚Ä¢ **Ajouter un fichier** : Ajoute des fichiers √† inclure (par ex. images, DLLs).\n"
            "‚Ä¢ **Enregistrer** : Enregistre les param√®tres actuels de l'√©diteur Spec.\n"
            "‚Ä¢ **Annuler** : Ferme la fen√™tre de l'√©diteur Spec sans enregistrer.\n"
            "‚Ä¢ **Aide** : Ouvre cette fen√™tre d'aide avec des instructions.\n"
        ),
        "es": (
            "=== Ayuda ‚Äì Descripci√≥n del Editor Spec con Ejemplos ===\n\n"
            "üöÄ **Opciones generales**\n"
            "‚Ä¢ **Onefile**\n"
            "  Empaqueta la aplicaci√≥n en un solo archivo ejecutable EXE (ideal para una distribuci√≥n sencilla).\n"
            "‚Ä¢ **Consola**\n"
            "  Muestra una ventana de consola durante la ejecuci√≥n de la aplicaci√≥n (√∫til para depuraci√≥n).\n"
            "‚Ä¢ **Ventana**\n"
            "  Inicia la aplicaci√≥n sin una ventana de consola visible (por ejemplo, para aplicaciones GUI).\n\n"
            "üì¶ **Campos:**\n"
            "‚Ä¢ **Nombre**\n"
            "  Nombre del archivo ejecutable o del proyecto.\n"
            "  Ejemplo de entrada:\n"
            "  backupWizard\n\n"
            "‚Ä¢ **Icono**\n"
            "  Ruta a un archivo .ico utilizado como √≠cono para el EXE.\n"
            "  Ejemplo de entrada:\n"
            "  C:/xampp/htdocs/cebterOS/engineering/icon_services.ico\n\n"
            "‚Ä¢ **Archivo Spec**\n"
            "  Ruta a un archivo .spec que contiene configuraciones de compilaci√≥n de PyInstaller.\n"
            "  Ejemplo de entrada:\n"
            "  C:/xampp/htdocs/cebterOS/engineering/backupWizard.spec\n\n"
            "‚Ä¢ **Hook de ejecuci√≥n**\n"
            "  Ruta a un script de Python ejecutado al iniciar la aplicaci√≥n.\n"
            "  Ejemplo de entrada:\n"
            "  C:/Proyectos/backupTool/startup_hook.py\n\n"
            "‚Ä¢ **Imports ocultos**\n"
            "  M√≥dulos de Python que PyInstaller podr√≠a no detectar autom√°ticamente.\n"
            "  Ejemplo de entrada:\n"
            "  requests\nlxml\nmodulo_personalizado\n"
            "  (Un m√≥dulo por l√≠nea o separados por comas)\n\n"
            "‚Ä¢ **Binarios (add_data)**\n"
            "  Archivos o carpetas adicionales para incluir en el EXE.\n"
            "  Formato: RutaOrigen:RutaDestino (entradas m√∫ltiples en l√≠neas nuevas).\n"
            "  Ejemplo de entrada:\n"
            "  C:/Datos/config.ini:config\nC:/Datos/imagenes:assets/imagenes\n\n"
            "‚öôÔ∏è **Opciones avanzadas:**\n"
            "‚Ä¢ **Activar UPX**: Comprime el archivo EXE con UPX para reducir el tama√±o del archivo.\n"
            "‚Ä¢ **Activar Depuraci√≥n**: Activa el modo de depuraci√≥n para salidas detalladas durante el proceso de compilaci√≥n.\n"
            "‚Ä¢ **Activar Limpieza**: Elimina archivos de compilaci√≥n antiguos antes de un nuevo proceso de compilaci√≥n.\n"
            "‚Ä¢ **Activar Strip**: Elimina los s√≠mbolos de depuraci√≥n del EXE para reducir el tama√±o del archivo.\n\n"
            "‚úÖ **Consejos para entradas exitosas:**\n"
            "‚Ä¢ **Binarios (add_data)**: Usa rutas absolutas y aseg√∫rate de que los archivos/carpetas existan.\n"
            "‚Ä¢ **Imports ocultos**: Especifica los m√≥dulos sin espacios, ya sea en l√≠neas nuevas o separados por comas.\n"
            "  Ejemplo:\n"
            "  numpy\nrequests\nflask\n"
            "‚Ä¢ **Icono y Archivo Spec**: Los archivos deben existir y estar correctamente especificados.\n"
            "‚Ä¢ Verifica las rutas para evitar errores, especialmente en la sensibilidad a may√∫sculas y min√∫sculas.\n\n"
            "üñ±Ô∏è **Botones:**\n"
            "‚Ä¢ **Agregar archivo**: A√±ade archivos para incluir (por ejemplo, im√°genes, DLLs).\n"
            "‚Ä¢ **Guardar**: Guarda la configuraci√≥n actual del Editor Spec.\n"
            "‚Ä¢ **Cancelar**: Cierra la ventana del Editor Spec sin guardar.\n"
            "‚Ä¢ **Ayuda**: Abre esta ventana de ayuda con instrucciones.\n"
        ),        
    },
    "nuitka_helper": {
        "de": (
            "=== Hilfe ‚Äì Nuitka Compilation Editor ===\n\n"
            "üöÄ **Allgemeine Optionen**\n"
            "‚Ä¢ **Use Nuitka**\n"
            "  Aktiviert die Kompilierung mit Nuitka, um Python-Skripte in ausf√ºhrbare Programme umzuwandeln. Deaktiviert bleibt das Skript ein normales Python-Programm, das Python ben√∂tigt.\n"
            "‚Ä¢ **Standalone**\n"
            "  Erstellt eine eigenst√§ndige Anwendung mit allen Abh√§ngigkeiten (z. B. Module, Bibliotheken) in einem Ordner. Ideal f√ºr die Verteilung auf Systeme ohne Python. Erzeugt gr√∂√üere Dateien (oft 100 MB+).\n"
            "‚Ä¢ **Onefile**\n"
            "  Packt die gesamte Anwendung in eine einzige .exe-Datei (Windows) oder ein Programm (Linux/macOS). Beim Start wird die Datei tempor√§r entpackt, was die Startzeit verl√§ngern kann.\n"
            "‚Ä¢ **Console**\n"
            "  √ñffnet ein Konsolenfenster beim Programmstart, das Ausgaben (z. B. print oder Fehlermeldungen) anzeigt. N√ºtzlich f√ºr Debugging, f√ºr Endnutzer oft deaktivieren.\n\n"
            "üì¶ **Weitere Optionen**\n"
            "‚Ä¢ **Follow Imports**\n"
            "  Erkennt und bindet alle importierten Module automatisch ein (z. B. numpy, requests). Spart manuelle Konfiguration, kann aber die Dateigr√∂√üe erh√∂hen. Deaktivieren, wenn du Module gezielt einbinden willst.\n"
            "‚Ä¢ **Follow Stdlib**\n"
            "  Bindet Python-Standardbibliotheken (z. B. os, sys) ein, falls nicht automatisch erkannt. Selten n√∂tig, nur bei obskuren Modulen wie ctypes aktivieren.\n"
            "‚Ä¢ **Plugins**\n"
            "  Aktiviert Unterst√ºtzung f√ºr spezielle Bibliotheken (z. B. --plugin-enable=pyqt6 f√ºr PyQt6). Ohne passende Plugins k√∂nnen GUI- oder Datenbibliotheken fehlerhaft kompiliert werden.\n"
            "‚Ä¢ **Extra Options**\n"
            "  Freitextfeld f√ºr zus√§tzliche Nuitka-Parameter, z. B. --include-module=mein_modul oder --noinclude-pandas. Falsche Eingaben f√ºhren zu Fehlern, siehe Nuitka-Dokumentation.\n"
            "‚Ä¢ **Output Dir**\n"
            "  Der Ordner, in den die kompilierten Dateien geschrieben werden. Muss existieren und beschreibbar sein, z. B. C:\\MeinProjekt\\output.\n\n"
            "‚öôÔ∏è **Leistungsoptionen**\n"
            "‚Ä¢ **LTO (Link Time Optimization)**\n"
            "  Optimiert die Bin√§rdatei f√ºr kleinere Gr√∂√üe und schnellere Ausf√ºhrung. Optionen:\n"
            "  - **auto**: Nuitka w√§hlt basierend auf Projektgr√∂√üe (Standard).\n"
            "  - **yes**: Maximale Optimierung, aber l√§ngere Kompilierungszeit und h√∂herer RAM-Verbrauch (8 GB+).\n"
            "  - **no**: Schnellere Kompilierung, gr√∂√üere Datei. Bei Fehlern no testen.\n"
            "‚Ä¢ **Jobs**\n"
            "  Anzahl paralleler Kompilierungsprozesse (1, 2, 4, 8). Mehr Jobs beschleunigen, verbrauchen aber mehr RAM. F√ºr moderne PCs: 4 oder 8, bei wenig RAM: 1 oder 2.\n"
            "‚Ä¢ **Show Progress / Memory / Scons**\n"
            "  Zeigt Details w√§hrend der Kompilierung:\n"
            "  - **Progress**: Fortschritt (z. B. 'Modul X wird kompiliert').\n"
            "  - **Memory**: Speicherverbrauch, hilfreich bei LTO.\n"
            "  - **Scons**: Details des Build-Systems, f√ºr fortgeschrittene Nutzer.\n"
            "‚Ä¢ **Windows UAC Admin**\n"
            "  Fordert Admin-Rechte beim Programmstart (UAC-Abfrage). Nur aktivieren, wenn die Anwendung Systemzugriffe ben√∂tigt (z. B. Schreiben in C:\\Program Files).\n\n"
            "üé® **Windows-spezifische Optionen**\n"
            "‚Ä¢ **Windows Icon**\n"
            "  Pfad zu einer .ico-Datei (z. B. C:\\icon.ico) f√ºr das Programmsymbol in Taskleiste/Explorer. Muss mehrere Aufl√∂sungen (16x16, 32x32) enthalten.\n"
            "‚Ä¢ **Windows Splash**\n"
            "  Pfad zu einem Bild (z. B. C:\\splash.png), das beim Programmstart angezeigt wird. N√ºtzlich bei langer Ladezeit, niedrige Aufl√∂sung bevorzugen.\n\n"
            "‚úÖ **Tipps**\n"
            "‚Ä¢ √úberpr√ºfe Script-Pfad und Output-Ordner vor der Kompilierung.\n"
            "‚Ä¢ Nutze nur Plugins, die mit deinen Bibliotheken kompatibel sind (siehe Nuitka-Dokumentation).\n"
            "‚Ä¢ Security Level Buttons w√§hlen vordefinierte Einstellungen (z. B. schnell oder sicher). Mit Analyse pr√ºfen.\n"
            "‚Ä¢ Aktiviere Show Progress/Memory bei Fehlern, um Probleme zu finden.\n\n"
            "üñ±Ô∏è **Schaltfl√§chen**\n"
            "‚Ä¢ **Analyse**: Pr√ºft Pfade, Plugins und Einstellungen auf Fehler vor der Kompilierung.\n"
            "‚Ä¢ **Save**: Speichert die Einstellungen und schlie√üt den Editor.\n"
            "‚Ä¢ **Cancel**: Schlie√üt ohne Speichern.\n"
            "‚Ä¢ **Help**: √ñffnet dieses Hilfefenster.\n"
        ),
        "en": (
            "=== Help ‚Äì Nuitka Compilation Editor ===\n\n"
            "üöÄ **General Options**\n"
            "‚Ä¢ **Use Nuitka**\n"
            "  Enables compilation with Nuitka to convert Python scripts into executable programs. If disabled, the script remains a regular Python program requiring Python.\n"
            "‚Ä¢ **Standalone**\n"
            "  Creates a standalone application with all dependencies (e.g., modules, libraries) in one folder. Ideal for distribution on systems without Python. Generates larger files (often 100 MB+).\n"
            "‚Ä¢ **Onefile**\n"
            "  Packs the entire application into a single .exe file (Windows) or program (Linux/macOS). Temporarily unpacked at runtime, which may increase startup time.\n"
            "‚Ä¢ **Console**\n"
            "  Opens a console window at program start, showing outputs (e.g., print or error messages). Useful for debugging; often disabled for end users.\n\n"
            "üì¶ **Additional Options**\n"
            "‚Ä¢ **Follow Imports**\n"
            "  Automatically detects and includes all imported modules (e.g., numpy, requests). Saves manual configuration but may increase file size. Disable to include modules selectively.\n"
            "‚Ä¢ **Follow Stdlib**\n"
            "  Includes Python standard libraries (e.g., os, sys) if not automatically detected. Rarely needed, only enable for obscure modules like ctypes.\n"
            "‚Ä¢ **Plugins**\n"
            "  Enables support for specific libraries (e.g., --plugin-enable=pyqt6 for PyQt6). Without appropriate plugins, GUI or data libraries may compile incorrectly.\n"
            "‚Ä¢ **Extra Options**\n"
            "  Free text field for additional Nuitka parameters, e.g., --include-module=my_module or --noinclude-pandas. Incorrect inputs cause errors; see Nuitka documentation.\n"
            "‚Ä¢ **Output Dir**\n"
            "  The folder where compiled files are written. Must exist and be writable, e.g., C:\\MyProject\\output.\n\n"
            "‚öôÔ∏è **Performance Options**\n"
            "‚Ä¢ **LTO (Link Time Optimization)**\n"
            "  Optimizes the binary for smaller size and faster execution. Options:\n"
            "  - **auto**: Nuitka chooses based on project size (default).\n"
            "  - **yes**: Maximum optimization, but longer compilation time and higher RAM usage (8 GB+).\n"
            "  - **no**: Faster compilation, larger file. Test with no if errors occur.\n"
            "‚Ä¢ **Jobs**\n"
            "  Number of parallel compilation processes (1, 2, 4, 8). More jobs speed up compilation but use more RAM. For modern PCs: 4 or 8; for low RAM: 1 or 2.\n"
            "‚Ä¢ **Show Progress / Memory / Scons**\n"
            "  Shows details during compilation:\n"
            "  - **Progress**: Progress (e.g., 'Module X is being compiled').\n"
            "  - **Memory**: Memory usage, helpful for LTO.\n"
            "  - **Scons**: Build system details, for advanced users.\n"
            "‚Ä¢ **Windows UAC Admin**\n"
            "  Requests admin rights at program start (UAC prompt). Enable only if the application requires system access (e.g., writing to C:\\Program Files).\n\n"
            "üé® **Windows-specific Options**\n"
            "‚Ä¢ **Windows Icon**\n"
            "  Path to an .ico file (e.g., C:\\icon.ico) for the program icon in the taskbar/explorer. Must include multiple resolutions (16x16, 32x32).\n"
            "‚Ä¢ **Windows Splash**\n"
            "  Path to an image (e.g., C:\\splash.png) displayed at program start. Useful for long load times; prefer low resolution.\n\n"
            "‚úÖ **Tips**\n"
            "‚Ä¢ Check script path and output folder before compilation.\n"
            "‚Ä¢ Use only plugins compatible with your libraries (see Nuitka documentation).\n"
            "‚Ä¢ Security Level Buttons select predefined settings (e.g., fast or secure). Verify with analysis.\n"
            "‚Ä¢ Enable Show Progress/Memory for troubleshooting errors.\n\n"
            "üñ±Ô∏è **Buttons**\n"
            "‚Ä¢ **Analyze**: Checks paths, plugins, and settings for errors before compilation.\n"
            "‚Ä¢ **Save**: Saves settings and closes the editor.\n"
            "‚Ä¢ **Cancel**: Closes without saving.\n"
            "‚Ä¢ **Help**: Opens this help window.\n"
        ),
        "fr": (
            "=== Aide ‚Äì √âditeur de compilation Nuitka ===\n\n"
            "üöÄ **Options g√©n√©rales**\n"
            "‚Ä¢ **Utiliser Nuitka**\n"
            "  Active la compilation avec Nuitka pour convertir les scripts Python en programmes ex√©cutables. Si d√©sactiv√©, le script reste un programme Python standard n√©cessitant Python.\n"
            "‚Ä¢ **Standalone**\n"
            "  Cr√©e une application autonome avec toutes les d√©pendances (modules, biblioth√®ques) dans un seul dossier. Id√©al pour la distribution sur des syst√®mes sans Python. G√©n√®re des fichiers plus volumineux (souvent 100 Mo+).\n"
            "‚Ä¢ **Onefile**\n"
            "  Regroupe toute l'application dans un seul fichier .exe (Windows) ou programme (Linux/macOS). D√©compress√© temporairement au d√©marrage, ce qui peut augmenter le temps de lancement.\n"
            "‚Ä¢ **Console**\n"
            "  Ouvre une fen√™tre de console au d√©marrage du programme, affichant les sorties (par ex. print ou messages d'erreur). Utile pour le d√©bogage ; souvent d√©sactiv√© pour les utilisateurs finaux.\n\n"
            "üì¶ **Options suppl√©mentaires**\n"
            "‚Ä¢ **Suivre les imports**\n"
            "  D√©tecte et inclut automatiquement tous les modules import√©s (par ex. numpy, requests). √âvite une configuration manuelle mais peut augmenter la taille du fichier. D√©sactivez pour inclure les modules de mani√®re s√©lective.\n"
            "‚Ä¢ **Suivre la biblioth√®que standard**\n"
            "  Inclut les biblioth√®ques standard Python (par ex. os, sys) si elles ne sont pas d√©tect√©es automatiquement. Rarement n√©cessaire, activez uniquement pour des modules rares comme ctypes.\n"
            "‚Ä¢ **Plugins**\n"
            "  Active le support pour des biblioth√®ques sp√©cifiques (par ex. --plugin-enable=pyqt6 pour PyQt6). Sans plugins appropri√©s, les biblioth√®ques GUI ou de donn√©es peuvent √™tre compil√©es incorrectement.\n"
            "‚Ä¢ **Options suppl√©mentaires**\n"
            "  Champ de texte libre pour des param√®tres Nuitka suppl√©mentaires, par ex. --include-module=mon_module ou --noinclude-pandas. Des entr√©es incorrectes provoquent des erreurs ; voir la documentation Nuitka.\n"
            "‚Ä¢ **Dossier de sortie**\n"
            "  Dossier o√π les fichiers compil√©s sont √©crits. Doit exister et √™tre accessible en √©criture, par ex. C:\\MonProjet\\output.\n\n"
            "‚öôÔ∏è **Options de performance**\n"
            "‚Ä¢ **LTO (Optimisation au moment de la liaison)**\n"
            "  Optimise le binaire pour une taille r√©duite et une ex√©cution plus rapide. Options :\n"
            "  - **auto** : Nuitka choisit en fonction de la taille du projet (par d√©faut).\n"
            "  - **yes** : Optimisation maximale, mais temps de compilation plus long et consommation de RAM √©lev√©e (8 Go+).\n"
            "  - **no** : Compilation plus rapide, fichier plus volumineux. Tester avec no en cas d'erreurs.\n"
            "‚Ä¢ **Jobs**\n"
            "  Nombre de processus de compilation parall√®les (1, 2, 4, 8). Plus de jobs acc√©l√®rent la compilation mais consomment plus de RAM. Pour les PC modernes : 4 ou 8 ; pour peu de RAM : 1 ou 2.\n"
            "‚Ä¢ **Afficher la progression / M√©moire / Scons**\n"
            "  Affiche des d√©tails pendant la compilation :\n"
            "  - **Progression** : Avancement (par ex. 'Module X en cours de compilation').\n"
            "  - **M√©moire** : Consommation de m√©moire, utile pour LTO.\n"
            "  - **Scons** : D√©tails du syst√®me de build, pour les utilisateurs avanc√©s.\n"
            "‚Ä¢ **Windows UAC Admin**\n"
            "  Demande des droits d'administrateur au d√©marrage du programme (invite UAC). Activer uniquement si l'application n√©cessite un acc√®s syst√®me (par ex. √©criture dans C:\\Program Files).\n\n"
            "üé® **Options sp√©cifiques √† Windows**\n"
            "‚Ä¢ **Ic√¥ne Windows**\n"
            "  Chemin vers un fichier .ico (par ex. C:\\icon.ico) pour l'ic√¥ne du programme dans la barre des t√¢ches/explorateur. Doit inclure plusieurs r√©solutions (16x16, 32x32).\n"
            "‚Ä¢ **Splash Windows**\n"
            "  Chemin vers une image (par ex. C:\\splash.png) affich√©e au d√©marrage du programme. Utile pour les longs temps de chargement ; pr√©f√©rez une faible r√©solution.\n\n"
            "‚úÖ **Conseils**\n"
            "‚Ä¢ V√©rifiez le chemin du script et le dossier de sortie avant la compilation.\n"
            "‚Ä¢ Utilisez uniquement des plugins compatibles avec vos biblioth√®ques (voir la documentation Nuitka).\n"
            "‚Ä¢ Les boutons de niveau de s√©curit√© s√©lectionnent des param√®tres pr√©d√©finis (par ex. rapide ou s√©curis√©). V√©rifiez avec l'analyse.\n"
            "‚Ä¢ Activez Afficher la progression/M√©moire pour r√©soudre les erreurs.\n\n"
            "üñ±Ô∏è **Boutons**\n"
            "‚Ä¢ **Analyser** : V√©rifie les chemins, plugins et param√®tres pour d√©tecter les erreurs avant la compilation.\n"
            "‚Ä¢ **Enregistrer** : Enregistre les param√®tres et ferme l'√©diteur.\n"
            "‚Ä¢ **Annuler** : Ferme sans enregistrer.\n"
            "‚Ä¢ **Aide** : Ouvre cette fen√™tre d'aide.\n"
        ),
        "es": (
            "=== Ayuda ‚Äì Editor de Compilaci√≥n Nuitka ===\n\n"
            "üöÄ **Opciones generales**\n"
            "‚Ä¢ **Usar Nuitka**\n"
            "  Activa la compilaci√≥n con Nuitka para convertir scripts de Python en programas ejecutables. Si est√° desactivado, el script sigue siendo un programa Python normal que requiere Python.\n"
            "‚Ä¢ **Independiente**\n"
            "  Crea una aplicaci√≥n independiente con todas las dependencias (por ejemplo, m√≥dulos, bibliotecas) en una sola carpeta. Ideal para distribuir en sistemas sin Python. Genera archivos m√°s grandes (a menudo 100 MB+).\n"
            "‚Ä¢ **Onefile**\n"
            "  Empaqueta toda la aplicaci√≥n en un solo archivo .exe (Windows) o programa (Linux/macOS). Se descomprime temporalmente en tiempo de ejecuci√≥n, lo que puede aumentar el tiempo de inicio.\n"
            "‚Ä¢ **Consola**\n"
            "  Abre una ventana de consola al iniciar el programa, mostrando salidas (por ejemplo, print o mensajes de error). √ötil para depuraci√≥n; a menudo desactivado para usuarios finales.\n\n"
            "üì¶ **Opciones adicionales**\n"
            "‚Ä¢ **Seguir importaciones**\n"
            "  Detecta e incluye autom√°ticamente todos los m√≥dulos importados (por ejemplo, numpy, requests). Ahorra configuraci√≥n manual pero puede aumentar el tama√±o del archivo. Desactiva para incluir m√≥dulos selectivamente.\n"
            "‚Ä¢ **Seguir biblioteca est√°ndar**\n"
            "  Incluye bibliotecas est√°ndar de Python (por ejemplo, os, sys) si no se detectan autom√°ticamente. Raramente necesario, activar solo para m√≥dulos poco comunes como ctypes.\n"
            "‚Ä¢ **Plugins**\n"
            "  Habilita soporte para bibliotecas espec√≠ficas (por ejemplo, --plugin-enable=pyqt6 para PyQt6). Sin los plugins adecuados, las bibliotecas de interfaz gr√°fica o de datos pueden compilarse incorrectamente.\n"
            "‚Ä¢ **Opciones extra**\n"
            "  Campo de texto libre para par√°metros adicionales de Nuitka, por ejemplo, --include-module=mi_modulo o --noinclude-pandas. Entradas incorrectas causan errores; consulta la documentaci√≥n de Nuitka.\n"
            "‚Ä¢ **Directorio de salida**\n"
            "  Carpeta donde se escriben los archivos compilados. Debe existir y ser escribible, por ejemplo, C:\\MiProyecto\\output.\n\n"
            "‚öôÔ∏è **Opciones de rendimiento**\n"
            "‚Ä¢ **LTO (Optimizaci√≥n en tiempo de enlace)**\n"
            "  Optimiza el binario para un tama√±o menor y una ejecuci√≥n m√°s r√°pida. Opciones:\n"
            "  - **auto**: Nuitka elige seg√∫n el tama√±o del proyecto (predeterminado).\n"
            "  - **yes**: Optimizaci√≥n m√°xima, pero mayor tiempo de compilaci√≥n y consumo de RAM (8 GB+).\n"
            "  - **no**: Compilaci√≥n m√°s r√°pida, archivo m√°s grande. Prueba con no si hay errores.\n"
            "‚Ä¢ **Jobs**\n"
            "  N√∫mero de procesos de compilaci√≥n paralelos (1, 2, 4, 8). M√°s jobs aceleran la compilaci√≥n pero usan m√°s RAM. Para PCs modernos: 4 u 8; para poca RAM: 1 o 2.\n"
            "‚Ä¢ **Mostrar progreso / Memoria / Scons**\n"
            "  Muestra detalles durante la compilaci√≥n:\n"
            "  - **Progreso**: Avance (por ejemplo, 'M√≥dulo X est√° siendo compilado').\n"
            "  - **Memoria**: Consumo de memoria, √∫til para LTO.\n"
            "  - **Scons**: Detalles del sistema de compilaci√≥n, para usuarios avanzados.\n"
            "‚Ä¢ **Windows UAC Admin**\n"
            "  Solicita derechos de administrador al iniciar el programa (aviso UAC). Activar solo si la aplicaci√≥n requiere acceso al sistema (por ejemplo, escribir en C:\\Program Files).\n\n"
            "üé® **Opciones espec√≠ficas de Windows**\n"
            "‚Ä¢ **√çcono de Windows**\n"
            "  Ruta a un archivo .ico (por ejemplo, C:\\icon.ico) para el √≠cono del programa en la barra de tareas/explorador. Debe incluir m√∫ltiples resoluciones (16x16, 32x32).\n"
            "‚Ä¢ **Splash de Windows**\n"
            "  Ruta a una imagen (por ejemplo, C:\\splash.png) mostrada al iniciar el programa. √ötil para tiempos de carga largos; prefiere baja resoluci√≥n.\n\n"
            "‚úÖ **Consejos**\n"
            "‚Ä¢ Verifica la ruta del script y la carpeta de salida antes de la compilaci√≥n.\n"
            "‚Ä¢ Usa solo plugins compatibles con tus bibliotecas (consulta la documentaci√≥n de Nuitka).\n"
            "‚Ä¢ Los botones de nivel de seguridad seleccionan configuraciones predefinidas (por ejemplo, r√°pido o seguro). Verifica con an√°lisis.\n"
            "‚Ä¢ Activa Mostrar progreso/Memoria para solucionar errores.\n\n"
            "üñ±Ô∏è **Botones**\n"
            "‚Ä¢ **Analizar**: Verifica rutas, plugins y configuraciones para errores antes de la compilaci√≥n.\n"
            "‚Ä¢ **Guardar**: Guarda las configuraciones y cierra el editor.\n"
            "‚Ä¢ **Cancelar**: Cierra sin guardar.\n"
            "‚Ä¢ **Ayuda**: Abre esta ventana de ayuda.\n"
        ),  
        
    }
}

def show_help_window(parent, text, title="Help", language="en"):
    help_window = tk.Toplevel(parent)
    help_window.title(title)
    help_window.geometry("900x600")
    help_window.transient(parent)
    help_window.grab_set()

    # Language selection
    lang_frame = tk.Frame(help_window)
    lang_frame.pack(fill="x", padx=10, pady=5)
    tkstationary = tk.Label(lang_frame, text="Language:" if language == "en" else "Sprache:" if language == "de" else "Langue:" if language == "fr" else "Idioma:")
    lang_frame.pack(side="left")
    lang_var = tk.StringVar(value=language)
    tk.OptionMenu(lang_frame, lang_var, "en", "de", "fr", "es", command=lambda _: update_text(text_area, text, lang_var.get(), title)).pack(side="left")

    # Header
    header_label = tk.Label(help_window, text=title, font=("Arial", 14, "bold"), anchor="w")
    header_label.pack(fill="x", padx=10, pady=5)

    # Scrollable text area
    text_area = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, font=("Courier", 10))
    text_area.insert(tk.END, text[language])
    text_area.configure(state="disabled")
    text_area.pack(expand=True, fill="both", padx=10, pady=5)

    # Close button
    close_button = tk.Button(help_window, text="Close" if language == "en" else "Schlie√üen" if language == "de" else "Fermer" if language == "fr" else "Cerrar", command=help_window.destroy)
    close_button.pack(pady=10)

    def update_text(text_area, text, lang, base_title):
        text_area.configure(state="normal")
        text_area.delete(1.0, tk.END)
        text_area.insert(tk.END, text[lang])
        text_area.configure(state="disabled")
        close_button.config(text="Close" if lang == "en" else "Schlie√üen" if lang == "de" else "Fermer" if lang == "fr" else "Cerrar")
        new_title = base_title
        if lang == "en":
            new_title = base_title.replace("Hilfe", "Help").replace("Aide", "Help").replace("Ayuda", "Help")
        elif lang == "de":
            new_title = base_title.replace("Help", "Hilfe").replace("Aide", "Hilfe").replace("Ayuda", "Hilfe")
        elif lang == "fr":
            new_title = base_title.replace("Help", "Aide").replace("Hilfe", "Aide").replace("Ayuda", "Aide")
        elif lang == "es":
            new_title = base_title.replace("Help", "Ayuda").replace("Hilfe", "Ayuda").replace("Aide", "Ayuda")
        help_window.title(new_title)
        lang_frame.children["!label"].config(text="Language:" if lang == "en" else "Sprache:" if lang == "de" else "Langue:" if lang == "fr" else "Idioma:")

def show_edit_helper(parent_window, language="en"):
    title = "Help ‚Äì Editor" if language == "en" else "Hilfe ‚Äì Editor" if language == "de" else "Aide ‚Äì √âditeur" if language == "fr" else "Ayuda ‚Äì Editor"
    show_help_window(parent_window, HELP_TEXTS["edit_helper"], title=title, language=language)

def show_main_helper(parent_window, language="en"):
    title = "Help ‚Äì AutoPy++" if language == "en" else "Hilfe ‚Äì AutoPy++" if language == "de" else "Aide ‚Äì AutoPy++" if language == "fr" else "Ayuda ‚Äì AutoPy++"
    show_help_window(parent_window, HELP_TEXTS["main_helper"], title=title, language=language)

def show_spec_helper(parent_window, language="en"):
    title = "Help ‚Äì Spec-Editor" if language == "en" else "Hilfe ‚Äì Spec-Editor" if language == "de" else "Aide ‚Äì √âditeur Spec" if language == "fr" else "Ayuda ‚Äì Editor Spec"
    show_help_window(parent_window, HELP_TEXTS["spec_helper"], title=title, language=language)

def show_nuitka_helper(parent_window, language="en"):
    title = "Help ‚Äì Nuitka Compilation Editor" if language == "en" else "Hilfe ‚Äì Nuitka Compilation Editor" if language == "de" else "Aide ‚Äì √âditeur de Compilation Nuitka" if language == "fr" else "Ayuda ‚Äì Editor de Compilaci√≥n Nuitka"
    show_help_window(parent_window, HELP_TEXTS["nuitka_helper"], title=title, language=language)

# Example usage for testing
if __name__ == "__main__":
    root = tk.Tk()
    root.title("Test Window")
    tk.Button(root, text="Show Edit Help (EN)", command=lambda: show_edit_helper(root, "en")).pack(pady=5)
    tk.Button(root, text="Show Edit Help (DE)", command=lambda: show_edit_helper(root, "de")).pack(pady=5)
    tk.Button(root, text="Show Edit Help (FR)", command=lambda: show_edit_helper(root, "fr")).pack(pady=5)
    tk.Button(root, text="Show Edit Help (ES)", command=lambda: show_edit_helper(root, "es")).pack(pady=5)
    tk.Button(root, text="Show Main Help (EN)", command=lambda: show_main_helper(root, "en")).pack(pady=5)
    tk.Button(root, text="Show Main Help (DE)", command=lambda: show_main_helper(root, "de")).pack(pady=5)
    tk.Button(root, text="Show Main Help (FR)", command=lambda: show_main_helper(root, "fr")).pack(pady=5)
    tk.Button(root, text="Show Main Help (ES)", command=lambda: show_main_helper(root, "es")).pack(pady=5)
    tk.Button(root, text="Show Spec Help (EN)", command=lambda: show_spec_helper(root, "en")).pack(pady=5)
    tk.Button(root, text="Show Spec Help (DE)", command=lambda: show_spec_helper(root, "de")).pack(pady=5)
    tk.Button(root, text="Show Spec Help (FR)", command=lambda: show_spec_helper(root, "fr")).pack(pady=5)
    tk.Button(root, text="Show Spec Help (ES)", command=lambda: show_spec_helper(root, "es")).pack(pady=5)
    tk.Button(root, text="Show Nuitka Help (EN)", command=lambda: show_nuitka_helper(root, "en")).pack(pady=5)
    tk.Button(root, text="Show Nuitka Help (DE)", command=lambda: show_nuitka_helper(root, "de")).pack(pady=5)
    tk.Button(root, text="Show Nuitka Help (FR)", command=lambda: show_nuitka_helper(root, "fr")).pack(pady=5)
    tk.Button(root, text="Show Nuitka Help (ES)", command=lambda: show_nuitka_helper(root, "es")).pack(pady=5)
    root.mainloop()